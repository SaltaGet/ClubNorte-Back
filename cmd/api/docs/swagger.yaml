definitions:
  schemas.CategoryCreate:
    properties:
      name:
        example: Categoria1
        type: string
    required:
    - name
    type: object
  schemas.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  schemas.CategoryUpdate:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Categoria1
        type: string
    required:
    - id
    - name
    type: object
  schemas.DepositResponse:
    properties:
      category:
        $ref: '#/definitions/schemas.CategoryResponse'
      code:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      stock:
        type: number
    type: object
  schemas.DepositUpdateStock:
    properties:
      method:
        enum:
        - add
        - subtract
        - set
        example: add|subtract|set
        type: string
      product_id:
        example: 1
        type: integer
      stock:
        example: 10
        type: number
    required:
    - product_id
    - stock
    type: object
  schemas.ExpenseBuyCreate:
    properties:
      description:
        example: description|null
        type: string
      item_expense_buys:
        items:
          $ref: '#/definitions/schemas.ItemExpenseBuyCreate'
        type: array
      payment_method:
        enum:
        - efectivo
        - tarjeta
        - transferencia
        example: efectivo|tarjeta|transferencia
        type: string
    required:
    - item_expense_buys
    type: object
  schemas.ExpenseBuyDateRequest:
    properties:
      from_date:
        example: "2022-01-01"
        type: string
      to_date:
        example: "2022-12-31"
        type: string
    type: object
  schemas.ExpenseBuyResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      item_expense_buys:
        items:
          $ref: '#/definitions/schemas.ItemExpenseBuyResponse'
        type: array
      payment_method:
        type: string
      total:
        type: number
      user:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.ExpenseBuyResponseDTO:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payment_method:
        type: string
      total:
        type: number
      user:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.ExpenseCreate:
    properties:
      description:
        example: description|null
        type: string
      payment_method:
        enum:
        - efectivo
        - tarjeta
        - transferencia
        type: string
      total:
        example: 1000
        type: number
    required:
    - payment_method
    - total
    type: object
  schemas.ExpenseDateRequest:
    properties:
      from_date:
        example: "2022-01-01"
        type: string
      to_date:
        example: "2022-12-31"
        type: string
    type: object
  schemas.ExpenseResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      payment_method:
        type: string
      register_id:
        type: integer
      total:
        type: number
      user:
        allOf:
        - $ref: '#/definitions/schemas.UserSimpleDTO'
        description: PointSale     PointSaleResponse `json:"point_sale"`
    type: object
  schemas.ExpenseResponseDTO:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payment_method:
        type: string
      total:
        type: number
      user:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.ExpenseSimpleResponseDTO:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payment_method:
        type: string
      total:
        type: number
    type: object
  schemas.IncomeCreate:
    properties:
      description:
        example: description|null
        type: string
      items:
        items:
          $ref: '#/definitions/schemas.IncomeItemCreate'
        type: array
      payment_method:
        enum:
        - efectivo
        - tarjeta
        - transferencia
        example: efectivo|tarjeta|transferencia
        type: string
    required:
    - items
    - payment_method
    type: object
  schemas.IncomeDateRequest:
    properties:
      from_date:
        example: "2022-01-01"
        type: string
      to_date:
        example: "2022-12-31"
        type: string
    type: object
  schemas.IncomeItemCreate:
    properties:
      product_id:
        example: 1
        type: integer
      quantity:
        example: 10
        type: number
    required:
    - product_id
    - quantity
    type: object
  schemas.IncomeItemResponse:
    properties:
      id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/schemas.ProductSimpleResponseDTO'
      quantity:
        type: number
      subtotal:
        type: number
    type: object
  schemas.IncomeResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/schemas.IncomeItemResponse'
        type: array
      payment_method:
        type: string
      total:
        type: number
      user:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.IncomeResponseDTO:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payment_method:
        type: string
      total:
        type: number
      user:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.IncomeSimpleResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/schemas.IncomeItemResponse'
        type: array
      payment_method:
        type: string
      total:
        type: number
    type: object
  schemas.IncomeSportsCourtsCreate:
    properties:
      date_play:
        example: "2023-08-01T12:00:00Z"
        type: string
      partial_pay:
        example: 100
        type: number
      partial_payment_method:
        enum:
        - efectivo
        - tarjeta
        - transferencia
        example: efectivo|tarjeta|transferencia
        type: string
      price:
        example: 200
        type: number
      shift:
        enum:
        - mañana
        - tarde
        - noche
        example: mañana|tarde|noche
        type: string
      sports_court_id:
        example: 1
        type: integer
    required:
    - date_play
    - shift
    - sports_court_id
    type: object
  schemas.IncomeSportsCourtsDateRequest:
    properties:
      from_date:
        example: "2022-01-01"
        type: string
      to_date:
        example: "2022-12-31"
        type: string
    type: object
  schemas.IncomeSportsCourtsResponse:
    properties:
      created_at:
        type: string
      date_partial_pay:
        type: string
      date_rest_pay:
        type: string
      description:
        type: string
      id:
        type: integer
      partial_pay:
        type: number
      partial_payment_method:
        type: string
      price:
        type: number
      rest_pay:
        type: number
      rest_payment_method:
        type: string
      user:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.IncomeSportsCourtsResponseDTO:
    properties:
      created_at:
        type: string
      date_partial_pay:
        type: string
      date_rest_pay:
        type: string
      description:
        type: string
      id:
        type: integer
      partial_pay:
        type: number
      partial_payment_method:
        type: string
      price:
        type: number
      rest_pay:
        type: number
      rest_payment_method:
        type: string
    type: object
  schemas.IncomeSportsCourtsRestPay:
    properties:
      id:
        example: 1
        type: integer
      rest_pay:
        example: 100
        type: number
      rest_payment_method:
        enum:
        - efectivo
        - tarjeta
        - transferencia
        example: efectivo|tarjeta|transferencia
        type: string
    required:
    - id
    type: object
  schemas.ItemExpenseBuyCreate:
    properties:
      price:
        example: 100
        type: number
      product_id:
        example: 1
        type: integer
      quantity:
        example: 10
        type: number
    required:
    - price
    - product_id
    - quantity
    type: object
  schemas.ItemExpenseBuyResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/schemas.ProductSimpleResponseDTO'
      quantity:
        type: integer
      subtotal:
        type: number
    type: object
  schemas.Login:
    properties:
      email:
        example: a@b.com
        type: string
      password:
        example: Password123*
        type: string
    required:
    - email
    - password
    type: object
  schemas.MovementStock:
    properties:
      amount:
        example: 10
        type: number
      from_id:
        example: 1
        type: integer
      from_type:
        enum:
        - deposit
        - point_sale
        example: deposit|point_sale
        type: string
      ignore_stock:
        example: false
        type: boolean
      product_id:
        example: 1
        type: integer
      to_id:
        example: 1
        type: integer
      to_type:
        enum:
        - deposit
        - point_sale
        example: deposit|point_sale
        type: string
    required:
    - amount
    - from_id
    - ignore_stock
    - product_id
    - to_id
    type: object
  schemas.MovementStockResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      from_id:
        type: integer
      from_type:
        type: string
      id:
        type: integer
      ignore_stock:
        type: boolean
      product:
        $ref: '#/definitions/schemas.ProductResponse'
      to_id:
        type: integer
      to_type:
        type: string
      user:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.PointSaleCreate:
    properties:
      description:
        example: description|null
        type: string
      name:
        example: Punto de venta 1
        type: string
    required:
    - name
    type: object
  schemas.PointSaleResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  schemas.PointSaleStock:
    properties:
      id:
        type: integer
      name:
        type: string
      stock:
        type: number
    type: object
  schemas.PointSaleUpdate:
    properties:
      description:
        example: description|null
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Punto de venta 1
        type: string
    required:
    - id
    - name
    type: object
  schemas.ProductCreate:
    properties:
      category_id:
        example: 1
        type: integer
      code:
        example: ABC123
        type: string
      description:
        example: description|null
        type: string
      min_amount:
        example: 10
        type: number
      name:
        example: Producto1
        type: string
      notifier:
        example: false
        type: boolean
      price:
        example: 100
        type: number
    required:
    - category_id
    - code
    - name
    - price
    type: object
  schemas.ProductFullResponse:
    properties:
      category:
        $ref: '#/definitions/schemas.CategoryResponse'
      code:
        type: string
      description:
        type: string
      id:
        type: integer
      min_amount:
        type: number
      name:
        type: string
      notifier:
        type: boolean
      price:
        type: number
      stock_deposit:
        $ref: '#/definitions/schemas.StockDepositResponse'
      stock_point_sales:
        items:
          $ref: '#/definitions/schemas.PointSaleStock'
        type: array
    type: object
  schemas.ProductResponse:
    properties:
      category:
        $ref: '#/definitions/schemas.CategoryResponse'
      code:
        type: string
      description:
        type: string
      id:
        type: integer
      min_amount:
        type: number
      name:
        type: string
      notifier:
        type: boolean
      price:
        type: number
      stock:
        type: number
    type: object
  schemas.ProductResponseDTO:
    properties:
      category:
        $ref: '#/definitions/schemas.CategoryResponse'
      code:
        type: string
      id:
        type: integer
      min_amount:
        type: number
      name:
        type: string
      notifier:
        type: boolean
      price:
        type: number
      stock:
        type: number
    type: object
  schemas.ProductSimpleResponseDTO:
    properties:
      code:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  schemas.ProductUpdate:
    properties:
      category_id:
        example: 1
        type: integer
      code:
        example: ABC123
        type: string
      description:
        example: description|null
        type: string
      id:
        example: 1
        type: integer
      min_amount:
        example: 10
        type: number
      name:
        example: Producto1
        type: string
      notifier:
        example: false
        type: boolean
      price:
        example: 100
        type: number
    required:
    - category_id
    - code
    - id
    - name
    - price
    type: object
  schemas.RegisterClose:
    properties:
      close_amount:
        example: 100
        type: number
    type: object
  schemas.RegisterFullResponse:
    properties:
      close_amount:
        type: number
      created_at:
        type: string
      expenses:
        items:
          $ref: '#/definitions/schemas.ExpenseSimpleResponseDTO'
        type: array
      hour_close:
        type: string
      hour_open:
        type: string
      id:
        type: integer
      income:
        items:
          $ref: '#/definitions/schemas.IncomeSimpleResponse'
        type: array
      income_sports_courts:
        items:
          $ref: '#/definitions/schemas.IncomeSportsCourtsResponseDTO'
        type: array
      is_close:
        type: boolean
      open_amount:
        type: number
      total_expense_cash:
        type: number
      total_expense_others:
        type: number
      total_income_cash:
        type: number
      total_income_others:
        type: number
      user_close:
        $ref: '#/definitions/schemas.UserSimpleDTO'
      user_open:
        $ref: '#/definitions/schemas.UserSimpleDTO'
    type: object
  schemas.RegisterInformRequest:
    properties:
      from_date:
        example: "2022-01-01"
        type: string
      to_date:
        example: "2022-12-31"
        type: string
    required:
    - from_date
    - to_date
    type: object
  schemas.RegisterOpen:
    properties:
      open_amount:
        example: 100
        type: number
    type: object
  schemas.Response:
    properties:
      body: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  schemas.RoleResponse:
    properties:
      id:
        type: integer
      name:
        enum:
        - admin
        - vendedor
        - repositor
        type: string
    type: object
  schemas.SportCourtCreate:
    properties:
      code:
        example: ABC123
        type: string
      description:
        example: description|null
        type: string
      name:
        example: Pista 1
        type: string
    required:
    - code
    - name
    type: object
  schemas.SportCourtResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      point_sales:
        items:
          $ref: '#/definitions/schemas.PointSaleResponse'
        type: array
      updated_at:
        type: string
    type: object
  schemas.SportCourtResponseDTO:
    properties:
      code:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  schemas.SportCourtUpdate:
    properties:
      code:
        example: ABC123
        type: string
      description:
        example: description|null
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Pista 1
        type: string
    required:
    - code
    - id
    - name
    type: object
  schemas.StockDepositResponse:
    properties:
      id:
        type: integer
      stock:
        type: number
    type: object
  schemas.UserCreate:
    properties:
      address:
        example: address|null
        type: string
      cellphone:
        example: cellphone|null
        type: string
      email:
        example: a@b.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: Password123*
        type: string
      point_sales_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
      role_id:
        example: 1
        type: integer
      username:
        example: johndoe
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - point_sales_ids
    - role_id
    - username
    type: object
  schemas.UserResponse:
    properties:
      address:
        type: string
      cellphone:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_name:
        type: string
      point_sales:
        items:
          $ref: '#/definitions/schemas.PointSaleResponse'
        type: array
      role:
        $ref: '#/definitions/schemas.RoleResponse'
      username:
        type: string
    type: object
  schemas.UserResponseDTO:
    properties:
      address:
        type: string
      cellphone:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_name:
        type: string
      role:
        $ref: '#/definitions/schemas.RoleResponse'
      username:
        type: string
    type: object
  schemas.UserSimpleDTO:
    properties:
      address:
        type: string
      cellphone:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      username:
        type: string
    type: object
  schemas.UserUpdate:
    properties:
      address:
        example: address|null
        type: string
      cellphone:
        example: cellphone|null
        type: string
      email:
        example: a@b.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      last_name:
        example: Doe
        type: string
      point_sales_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
      role_id:
        example: 1
        type: integer
      username:
        example: johndoe
        type: string
    required:
    - email
    - first_name
    - id
    - is_active
    - last_name
    - point_sales_ids
    - role_id
    - username
    type: object
  schemas.UserUpdatePassword:
    properties:
      confirm_pass:
        example: Password123*
        type: string
      new_password:
        example: Password123*
        type: string
      old_password:
        example: Password123*
        type: string
    required:
    - confirm_pass
    - new_password
    - old_password
    type: object
info:
  contact: {}
  description: This is a API for Club Norte
  termsOfService: http://swagger.io/terms/
  title: APP Club Norte
  version: "1.0"
paths:
  /api/v1/auth/current_point_sale:
    get:
      consumes:
      - application/json
      description: CurrentPointSale
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: CurrentPointSale point sale
      tags:
      - Auth
  /api/v1/auth/current_user:
    get:
      consumes:
      - application/json
      description: CurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: CurrentUser user
      tags:
      - Auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login user required email and password
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/schemas.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      summary: Login user
      tags:
      - Auth
  /api/v1/auth/login_point_sale/{point_sale_id}:
    post:
      consumes:
      - application/json
      description: LoginPointSale
      parameters:
      - description: point_sale_id
        in: path
        name: point_sale_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: LoginPointSale user
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: Logout user
      tags:
      - Auth
  /api/v1/auth/logout_point_sale:
    post:
      consumes:
      - application/json
      description: LogoutPointSale
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: LogoutPointSale user
      tags:
      - Auth
  /api/v1/category/create:
    post:
      consumes:
      - application/json
      description: CategoryCreate crear una categoria
      parameters:
      - description: Categoria a crear
        in: body
        name: category_create
        required: true
        schema:
          $ref: '#/definitions/schemas.CategoryCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: CategoryCreate
      tags:
      - Category
  /api/v1/category/delete/{id}:
    delete:
      consumes:
      - application/json
      description: CategoryDelete crear una categoria
      parameters:
      - description: Categoria a eliminar por ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: CategoryDelete
      tags:
      - Category
  /api/v1/category/get/{id}:
    get:
      consumes:
      - application/json
      description: CategoryGet obtener una categoria por ID
      parameters:
      - description: Id de la categoria
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: CategoryGet
      tags:
      - Category
  /api/v1/category/get_all:
    get:
      consumes:
      - application/json
      description: CategoryGetAll obtener todas las categorias
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: CategoryGet All
      tags:
      - Category
  /api/v1/category/update:
    put:
      consumes:
      - application/json
      description: CategoryUpdate crear una categoria
      parameters:
      - description: Categoria a editar
        in: body
        name: category_update
        required: true
        schema:
          $ref: '#/definitions/schemas.CategoryUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: CategoryUpdate
      tags:
      - Category
  /api/v1/deposit/get/{id}:
    get:
      consumes:
      - application/json
      description: DepositProductGetByID obtener un producto por ID del producto
      parameters:
      - description: Id del producto
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.DepositResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: DepositProductGetByID
      tags:
      - Deposit
  /api/v1/deposit/get_all:
    get:
      consumes:
      - application/json
      description: DepositProductGetAll obtener productos por paginacion
      parameters:
      - default: 1
        description: pagina
        in: query
        name: page
        type: integer
      - default: 10
        description: limite
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.DepositResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: DepositProductGetAll
      tags:
      - Deposit
  /api/v1/deposit/get_by_code:
    get:
      consumes:
      - application/json
      description: DepositProductGetByCode obtener un producto por codigo del deposito
      parameters:
      - description: codigo del producto
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.DepositResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: DepositProductGetByCode
      tags:
      - Deposit
  /api/v1/deposit/get_by_name:
    get:
      consumes:
      - application/json
      description: DepositProductGetByName obtener productos por por similitud de
        nombre
      parameters:
      - description: nombre por aproximacion del producto
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.DepositResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: DepositProductGetByName
      tags:
      - Deposit
  /api/v1/deposit/update_stock:
    put:
      consumes:
      - application/json
      description: DepositProductUpdateStock alctualizar stock de un producto del
        deposito
      parameters:
      - description: nombre por aproximacion del producto
        in: body
        name: stock_update
        required: true
        schema:
          $ref: '#/definitions/schemas.DepositUpdateStock'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.DepositResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: DepositProductUpdateStock
      tags:
      - Deposit
  /api/v1/expense/create:
    post:
      consumes:
      - application/json
      description: Crear un egreso
      parameters:
      - description: Datos requeridos para crear un egreso
        in: body
        name: expense_create
        required: true
        schema:
          $ref: '#/definitions/schemas.ExpenseCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseCreate
      tags:
      - Expense
  /api/v1/expense/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Eliminar un egreso
      parameters:
      - description: ID del egreso
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseDelte
      tags:
      - Expense
  /api/v1/expense/get/{id}:
    get:
      consumes:
      - application/json
      description: Obtener un egreso por ID
      parameters:
      - description: ID del ingreso
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ExpenseResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseGetByID
      tags:
      - Expense
  /api/v1/expense/get_by_date:
    post:
      consumes:
      - application/json
      description: Obtener egresos por fechas
      parameters:
      - description: Fecha desde - hasta del egreso
        in: body
        name: expense_date
        required: true
        schema:
          $ref: '#/definitions/schemas.ExpenseDateRequest'
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Número de elementos por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.ExpenseResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseGetByDate
      tags:
      - Expense
  /api/v1/expense_buy/create:
    post:
      consumes:
      - application/json
      description: Crear un egreso de compra
      parameters:
      - description: Datos requeridos para crear un egreso de compra
        in: body
        name: expense_create
        required: true
        schema:
          $ref: '#/definitions/schemas.ExpenseBuyCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseBuyCreate
      tags:
      - ExpenseBuy
  /api/v1/expense_buy/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Eliminar un egreso de compra
      parameters:
      - description: ID del egreso de compra
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseBuyDelte
      tags:
      - ExpenseBuy
  /api/v1/expense_buy/get/{id}:
    get:
      consumes:
      - application/json
      description: Obtener un egreso de compra por ID
      parameters:
      - description: ID del ingreso
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ExpenseBuyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseBuyGetByID
      tags:
      - ExpenseBuy
  /api/v1/expense_buy/get_by_date:
    post:
      consumes:
      - application/json
      description: Obtener egresos de compra por fechas
      parameters:
      - description: Fecha desde - hasta del egreso
        in: body
        name: expense_date
        required: true
        schema:
          $ref: '#/definitions/schemas.ExpenseBuyDateRequest'
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Número de elementos por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.ExpenseBuyResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ExpenseBuyGetByDate
      tags:
      - ExpenseBuy
  /api/v1/income/create:
    post:
      consumes:
      - application/json
      description: Crear un ingreso
      parameters:
      - description: Datos requeridos para crear un ingreso
        in: body
        name: income_create
        required: true
        schema:
          $ref: '#/definitions/schemas.IncomeCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeCreate
      tags:
      - Income
  /api/v1/income/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Eliminar un ingreso
      parameters:
      - description: ID del ingreso
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeDelte
      tags:
      - Income
  /api/v1/income/get/{id}:
    get:
      consumes:
      - application/json
      description: Obtener un ingreso por ID
      parameters:
      - description: ID del ingreso
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.IncomeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeGetByID
      tags:
      - Income
  /api/v1/income/get_by_date:
    post:
      consumes:
      - application/json
      description: Obtener ingresos por fechas
      parameters:
      - description: Fecha desde - hasta del ingreso
        in: body
        name: income_date
        required: true
        schema:
          $ref: '#/definitions/schemas.IncomeDateRequest'
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Número de elementos por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.IncomeResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeGetByDate
      tags:
      - Income
  /api/v1/income_sport_court/create:
    post:
      consumes:
      - application/json
      description: Crear un ingreso de una cancha
      parameters:
      - description: Datos requeridos para crear un ingreso
        in: body
        name: income_create
        required: true
        schema:
          $ref: '#/definitions/schemas.IncomeSportsCourtsCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeSportCourtCreate
      tags:
      - IncomeSportCourt
  /api/v1/income_sport_court/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Eliminar un ingreso
      parameters:
      - description: ID del ingreso
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeSportCourtDelete
      tags:
      - IncomeSportCourt
  /api/v1/income_sport_court/get/{id}:
    get:
      consumes:
      - application/json
      description: Obtener un ingreso por ID de una cancha
      parameters:
      - description: ID del ingreso
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.IncomeSportsCourtsResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeSportCourtGetByID
      tags:
      - IncomeSportCourt
  /api/v1/income_sport_court/get_by_date:
    post:
      consumes:
      - application/json
      description: Obtener ingresos por fechas
      parameters:
      - description: Fecha desde - hasta del ingreso
        in: body
        name: income_date
        required: true
        schema:
          $ref: '#/definitions/schemas.IncomeSportsCourtsDateRequest'
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Número de elementos por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.IncomeSportsCourtsResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeSportCourtGetByDate
      tags:
      - IncomeSportCourt
  /api/v1/income_sport_court/update_pay:
    put:
      consumes:
      - application/json
      description: Editar un ingreso de una cancha
      parameters:
      - description: Datos requeridos para editar un ingreso
        in: body
        name: income_sport_court_update_pay
        required: true
        schema:
          $ref: '#/definitions/schemas.IncomeSportsCourtsRestPay'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: IncomeSportCourtUpdate
      tags:
      - IncomeSportCourt
  /api/v1/movement_stock/get/{id}:
    get:
      consumes:
      - application/json
      description: MovementStockGet Obtener un movimiento de stock por ID
      parameters:
      - description: ID del movimiento de stock
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.MovementStockResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: MovementStockGet
      tags:
      - MovementStock
  /api/v1/movement_stock/get_all:
    get:
      consumes:
      - application/json
      description: MovementStockGetAll Obtener movimeintos de sotck por paginacion
      parameters:
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Número de elementos por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.MovementStockResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: MovementStockGetAll
      tags:
      - MovementStock
  /api/v1/movement_stock/move:
    post:
      consumes:
      - application/json
      description: MovementStock movimiento de stock entre doposito y puntos de ventas
      parameters:
      - description: movimiento de stock
        in: body
        name: movement_stock
        required: true
        schema:
          $ref: '#/definitions/schemas.MovementStock'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: MovementStock
      tags:
      - MovementStock
  /api/v1/notification/alert:
    get:
      consumes:
      - application/json
      description: Enviar notificaciones
      produces:
      - text/event-stream
      responses: {}
      security:
      - CookieAuth: []
      summary: NotificationAlert
      tags:
      - Notification
  /api/v1/point_sale/create:
    post:
      consumes:
      - application/json
      description: PointSaleCreate
      parameters:
      - description: PointSaleCreate
        in: body
        name: point_sale_create
        required: true
        schema:
          $ref: '#/definitions/schemas.PointSaleCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: PointSaleCreate
      tags:
      - PointSale
  /api/v1/point_sale/delete/{id}:
    delete:
      consumes:
      - application/json
      description: PointSaleDelete
      parameters:
      - description: ID Point Sale
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: PointSaleDelete
      tags:
      - PointSale
  /api/v1/point_sale/get/{id}:
    get:
      consumes:
      - application/json
      description: PointSaleGet
      parameters:
      - description: ID Point Sale
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: PointSaleGet
      tags:
      - PointSale
  /api/v1/point_sale/get_all:
    get:
      consumes:
      - application/json
      description: PointSaleGetAll
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: PointSaleGetAll
      tags:
      - PointSale
  /api/v1/point_sale/update:
    put:
      consumes:
      - application/json
      description: PointSaleUpdate
      parameters:
      - description: PointSaleUpdate
        in: body
        name: point_sale_update
        required: true
        schema:
          $ref: '#/definitions/schemas.PointSaleUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: PointSaleUpdate
      tags:
      - PointSale
  /api/v1/point_sale_product/get/{id}:
    get:
      consumes:
      - application/json
      description: Obtener un producto del punto de venta por ID
      parameters:
      - description: Id del producto
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: StockProductGetByID
      tags:
      - PointSaleProduct
  /api/v1/point_sale_product/get_all:
    get:
      consumes:
      - application/json
      description: Obtener todos los productos del punto de venta
      parameters:
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Número de elementos por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.ProductResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: StockProductGetAll
      tags:
      - PointSaleProduct
  /api/v1/point_sale_product/get_by_category/{category_id}:
    get:
      consumes:
      - application/json
      description: Obtener un producto del punto de venta por Id de categoria
      parameters:
      - description: ID de la categoria
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductResponseDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: StockProductGetByCategory
      tags:
      - PointSaleProduct
  /api/v1/point_sale_product/get_by_code:
    get:
      consumes:
      - application/json
      description: Obtener un producto del punto de venta por Codigo
      parameters:
      - description: codigo del producto
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: StockProductGetByCode
      tags:
      - PointSaleProduct
  /api/v1/point_sale_product/get_by_name:
    get:
      consumes:
      - application/json
      description: Obtener un producto del punto de venta por nombre
      parameters:
      - description: nombre del producto
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductResponseDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: StockProductGetByName
      tags:
      - PointSaleProduct
  /api/v1/product/create:
    post:
      consumes:
      - application/json
      description: ProductCreate crear nuevo producto
      parameters:
      - description: Información del producto a crear
        in: body
        name: productCreate
        required: true
        schema:
          $ref: '#/definitions/schemas.ProductCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductCreate
      tags:
      - Product
  /api/v1/product/delete/{id}:
    delete:
      consumes:
      - application/json
      description: ProductDelete elimina un producto
      parameters:
      - description: ID del producto
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductDelete
      tags:
      - Product
  /api/v1/product/get/{id}:
    get:
      consumes:
      - application/json
      description: ProductGet obtener un producto por ID
      parameters:
      - description: Id del producto
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductFullResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductGet
      tags:
      - Product
  /api/v1/product/get_all:
    get:
      consumes:
      - application/json
      description: ProductGetAll obtener todos los productos
      parameters:
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Número de elementos por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.ProductFullResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductGetAll
      tags:
      - Product
  /api/v1/product/get_by_category/{category_id}:
    get:
      consumes:
      - application/json
      description: ProductGetByCategory obtener un producto por Id de categoria
      parameters:
      - description: ID de la categoria
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductResponseDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductGetByCategory
      tags:
      - Product
  /api/v1/product/get_by_code:
    get:
      consumes:
      - application/json
      description: ProductGetByCode obtener un producto por Codigo
      parameters:
      - description: codigo del producto
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductGetByCode
      tags:
      - Product
  /api/v1/product/get_by_name:
    get:
      consumes:
      - application/json
      description: ProductGetByName obtener un producto por nombre
      parameters:
      - description: nombre del producto
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.ProductResponseDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductGetByName
      tags:
      - Product
  /api/v1/product/update:
    put:
      consumes:
      - application/json
      description: ProductUpdate edita un producto ya creado
      parameters:
      - description: Información del producto a editar
        in: body
        name: productUpdate
        required: true
        schema:
          $ref: '#/definitions/schemas.ProductUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: ProductUpdate
      tags:
      - Product
  /api/v1/register/close:
    post:
      consumes:
      - application/json
      description: Cierre de caja
      parameters:
      - description: Monto de cierre de caja
        in: body
        name: amount_close
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterClose'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: RegisterClose
      tags:
      - Register
  /api/v1/register/exist_open:
    get:
      consumes:
      - application/json
      description: Verifica si existe apertura de caja
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: RegisterExistOpen
      tags:
      - Register
  /api/v1/register/get/{id}:
    get:
      consumes:
      - application/json
      description: obtener caja por id
      parameters:
      - description: id de la caja
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.RegisterFullResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: RegisterGetByID
      tags:
      - Register
  /api/v1/register/inform:
    post:
      consumes:
      - application/json
      description: Informes de caja
      parameters:
      - description: Fechas de solicitud de informe
        in: body
        name: register_request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterInformRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: RegisterInform
      tags:
      - Register
  /api/v1/register/open:
    post:
      consumes:
      - application/json
      description: Apertura de caja
      parameters:
      - description: Monto de apertura de caja
        in: body
        name: amount_open
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterOpen'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: RegisterOpen
      tags:
      - Register
  /api/v1/role/get_all:
    get:
      consumes:
      - application/json
      description: RoleGetAll obtener todos los roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.RoleResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: RoleGetAll
      tags:
      - Role
  /api/v1/sport_court/create:
    post:
      consumes:
      - application/json
      description: Crear una cancha
      parameters:
      - description: Parametros para crear una cancha
        in: body
        name: sport_court_create
        required: true
        schema:
          $ref: '#/definitions/schemas.SportCourtCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: SportCourtCreate
      tags:
      - SportCourt
  /api/v1/sport_court/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Eliminar una cancha por id
      parameters:
      - description: ID de la cancha
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.SportCourtResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: SportCourtDelete
      tags:
      - SportCourt
  /api/v1/sport_court/get/{id}:
    get:
      consumes:
      - application/json
      description: Obtener una cancha por id
      parameters:
      - description: ID de la cancha
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.SportCourtResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: SportCourtGetByID
      tags:
      - SportCourt
  /api/v1/sport_court/get_all:
    get:
      consumes:
      - application/json
      description: Obtener todas las canchas
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.SportCourtResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: SportCourtGetAll
      tags:
      - SportCourt
  /api/v1/sport_court/get_all_by_point_sale:
    get:
      consumes:
      - application/json
      description: Obtener todas las canchas de un punto de venta
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.SportCourtResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: SportCourtGetAllByPointSale
      tags:
      - SportCourt
  /api/v1/sport_court/get_by_code:
    get:
      consumes:
      - application/json
      description: Obtener una cancha por id
      parameters:
      - description: Codigo de la cancha
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.SportCourtResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: SportCourtGetByCode
      tags:
      - SportCourt
  /api/v1/sport_court/update:
    put:
      consumes:
      - application/json
      description: Editar una cancha
      parameters:
      - description: Parametros para editar una cancha
        in: body
        name: sport_court_update
        required: true
        schema:
          $ref: '#/definitions/schemas.SportCourtUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: SportCourtUpdate
      tags:
      - SportCourt
  /api/v1/test_data/create:
    post:
      consumes:
      - application/json
      description: TestDataCreate
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: TestDataCreate
      tags:
      - Test
  /api/v1/test_data/delete:
    delete:
      consumes:
      - application/json
      description: TestDataDelete
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: TestDataDelete
      tags:
      - Test
  /api/v1/user/create:
    post:
      consumes:
      - application/json
      description: UserCreate Crear un nuevo usuario
      parameters:
      - description: user create
        in: body
        name: user_create
        required: true
        schema:
          $ref: '#/definitions/schemas.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserCreate
      tags:
      - User
  /api/v1/user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: UserDelete Eliminar un usuario por ID
      parameters:
      - description: Id del usuario
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserDelete
      tags:
      - User
  /api/v1/user/get/{id}:
    get:
      consumes:
      - application/json
      description: UserGetByID obtener usuario por ID
      parameters:
      - description: Id del usuario
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserGetByID
      tags:
      - User
  /api/v1/user/get_all:
    get:
      consumes:
      - application/json
      description: UserGetAll obtener todos los usuarios
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/schemas.UserResponseDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserGetAll
      tags:
      - User
  /api/v1/user/get_by_email:
    get:
      consumes:
      - application/json
      description: UserGetByEmail obtener usuario por Email
      parameters:
      - description: email del usuario
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.Response'
            - properties:
                body:
                  $ref: '#/definitions/schemas.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserGetByEmail
      tags:
      - User
  /api/v1/user/update:
    put:
      consumes:
      - application/json
      description: UserUpdate Editar un usuario
      parameters:
      - description: user create
        in: body
        name: user_update
        required: true
        schema:
          $ref: '#/definitions/schemas.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserUpdate
      tags:
      - User
  /api/v1/user/update_is_active/{id}:
    put:
      consumes:
      - application/json
      description: Actualizar un usuario a activo o inactivo
      parameters:
      - description: id del usuario a activar o inactivar
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserUpdateIsActive
      tags:
      - User
  /api/v1/user/update_password:
    put:
      consumes:
      - application/json
      description: UserUpdatePassword Actualizar la contraseña
      parameters:
      - description: update password
        in: body
        name: pass_update
        required: true
        schema:
          $ref: '#/definitions/schemas.UserUpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - CookieAuth: []
      summary: UserUpdatePassword
      tags:
      - User
securityDefinitions:
  CookieAuth:
    description: 'Enter your JWT token here. Example: "eyJhbGciOiJIUz..."'
    in: cookie
    name: access_token
    type: apiKey
swagger: "2.0"
